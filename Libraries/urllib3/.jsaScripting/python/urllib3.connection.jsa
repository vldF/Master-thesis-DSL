#load "Standard.jsa"
#load "urllib3.response.jsa"
var HTTPConnectionClassDescription = SemanticsApi.CreateClassObjectDescriptor("HTTPConnection");
CallHandlerResult HTTPConnection_getresponse_Handler(Location location, FunctionCall functionCall)
{
    var handledArguments = ProcessorApi.ProcessKeywordArguments(functionCall);
    handledArguments.TryGetValue("self", out var self);
    return CallHandlerResult.Processed(SemanticsApi.CreateObjectDescriptor("<HTTPResponse>"));
}
var HTTPConnection_getresponse_MethodDescriptor = ProcessorApi.CreateFunctionBuilder("getresponse").WithHandler(HTTPConnection_getresponse_Handler).WithArgumentsInfo(new ArgumentsInfo(["self", ], 1, false, false, 0, 0)).AssignTo(HTTPConnectionClassDescription).BuildAndRegister();
CallHandlerResult HTTPConnection_request_Handler(Location location, FunctionCall functionCall)
{
    var handledArguments = ProcessorApi.ProcessKeywordArguments(functionCall);
    handledArguments.TryGetValue("self", out var self);
    handledArguments.TryGetValue("url", out var url);
    Detect(location, url, "Server-Side Request Forgery", "HTTP URI");
    return CallHandlerResult.Processed(SemanticsApi.None);
}
var HTTPConnection_request_MethodDescriptor = ProcessorApi.CreateFunctionBuilder("request").WithHandler(HTTPConnection_request_Handler).WithArgumentsInfo(new ArgumentsInfo(["self", "url", ], 2, false, false, 0, 0)).AssignTo(HTTPConnectionClassDescription).BuildAndRegister();
CallHandlerResult HTTPConnection_request_chunked_Handler(Location location, FunctionCall functionCall)
{
    var handledArguments = ProcessorApi.ProcessKeywordArguments(functionCall);
    handledArguments.TryGetValue("self", out var self);
    handledArguments.TryGetValue("url", out var url);
    Detect(location, url, "Server-Side Request Forgery", "HTTP URI");
    return CallHandlerResult.Processed(SemanticsApi.None);
}
var HTTPConnection_request_chunked_MethodDescriptor = ProcessorApi.CreateFunctionBuilder("request_chunked").WithHandler(HTTPConnection_request_chunked_Handler).WithArgumentsInfo(new ArgumentsInfo(["self", "url", ], 2, false, false, 0, 0)).AssignTo(HTTPConnectionClassDescription).BuildAndRegister();
Interpreter.Assign(ModuleDescriptor, "HTTPConnection", HTTPConnectionClassDescription);
PythonTypes.BuildClass(HTTPConnectionClassDescription);
