var MyObjectClassDescription = SemanticsApi.CreateClassObjectDescriptor("MyObject");
CallHandlerResult MyObject_withoutTypeInfer_Handler(Location location, FunctionCall functionCall)
{
    var handledArguments = ProcessorApi.ProcessKeywordArguments(functionCall);
    handledArguments.TryGetValue("self", out var self);
    handledArguments.TryGetValue("arg1", out var arg1);
    handledArguments.TryGetValue("arg2", out var arg2);
    var sum = Interpreter.InvokeFunction(location, SemanticsApi.AddDescriptor, arg1, arg2);
    var sub = Interpreter.InvokeFunction(location, SemanticsApi.SubDescriptor, arg1, arg2);
    var mul = Interpreter.InvokeFunction(location, SemanticsApi.MultiplyDescriptor, arg1, arg2);
    var div = Interpreter.InvokeFunction(location, SemanticsApi.DivDescriptor, arg1, arg2);
    var unaryMinus = Interpreter.InvokeFunction(location, SemanticsApi.NegDescriptor, arg1);
    var parens = Interpreter.InvokeFunction(location, SemanticsApi.AddDescriptor, sum, sub);
    var complex = Interpreter.InvokeFunction(location, SemanticsApi.AddDescriptor, Interpreter.InvokeFunction(location, SemanticsApi.DivDescriptor, Interpreter.InvokeFunction(location, SemanticsApi.MultiplyDescriptor, Interpreter.InvokeFunction(location, SemanticsApi.AddDescriptor, sum, sub), mul), div), parens);
    return CallHandlerResult.Processed(complex);
}
var MyObject_withoutTypeInfer_MethodDescriptor = ProcessorApi.CreateFunctionBuilder("withoutTypeInfer").WithHandler(MyObject_withoutTypeInfer_Handler).WithArgumentsInfo(new ArgumentsInfo(["self", "arg1", "arg2", ], 3, false, false, 0, 0)).AssignTo(MyObjectClassDescription).BuildAndRegister();
CallHandlerResult MyObject_withTypeInfer_Handler(Location location, FunctionCall functionCall)
{
    var handledArguments = ProcessorApi.ProcessKeywordArguments(functionCall);
    handledArguments.TryGetValue("self", out var self);
    handledArguments.TryGetValue("arg1", out var arg1);
    handledArguments.TryGetValue("arg2", out var arg2);
    var sum = Interpreter.InvokeFunction(location, SemanticsApi.AddDescriptor, arg1, arg2);
    var sub = Interpreter.InvokeFunction(location, SemanticsApi.SubDescriptor, arg1, arg2);
    var mul = Interpreter.InvokeFunction(location, SemanticsApi.MultiplyDescriptor, arg1, arg2);
    var div = Interpreter.InvokeFunction(location, SemanticsApi.DivDescriptor, arg1, arg2);
    var unaryMinus = Interpreter.InvokeFunction(location, SemanticsApi.NegDescriptor, arg1);
    var parens = Interpreter.InvokeFunction(location, SemanticsApi.AddDescriptor, sum, sub);
    var complex = Interpreter.InvokeFunction(location, SemanticsApi.AddDescriptor, Interpreter.InvokeFunction(location, SemanticsApi.DivDescriptor, Interpreter.InvokeFunction(location, SemanticsApi.MultiplyDescriptor, Interpreter.InvokeFunction(location, SemanticsApi.AddDescriptor, sum, sub), mul), div), parens);
    return CallHandlerResult.Processed(complex);
}
var MyObject_withTypeInfer_MethodDescriptor = ProcessorApi.CreateFunctionBuilder("withTypeInfer").WithHandler(MyObject_withTypeInfer_Handler).WithArgumentsInfo(new ArgumentsInfo(["self", "arg1", "arg2", ], 3, false, false, 0, 0)).AssignTo(MyObjectClassDescription).BuildAndRegister();
Interpreter.Assign(ModuleDescriptor, "MyObject", MyObjectClassDescription);
PythonTypes.BuildClass(MyObjectClassDescription);
