var TypeClassDescription = SemanticsApi.CreateClassObjectDescriptor("Type");
Interpreter.Assign(ModuleDescriptor, "Type", TypeClassDescription);
PythonTypes.BuildClass(TypeClassDescription);
var MyObjectClassDescription = SemanticsApi.CreateClassObjectDescriptor("MyObject");
CallHandlerResult MyObject_InnerFunc_Handler(Location location, FunctionCall functionCall)
{
    var handledArguments = ProcessorApi.ProcessKeywordArguments(functionCall);
    handledArguments.TryGetValue("self", out var self);
    handledArguments.TryGetValue("arg1", out var arg1);
    MyIntrinsicFunction(location, arg1);
    return CallHandlerResult.Processed(MyIntrinsicFunction(location, arg1));
}
var MyObject_InnerFunc_MethodDescriptor = ProcessorApi.CreateFunctionBuilder("InnerFunc").AssignTo(MyObjectClassDescription).WithHandler(MyObject_InnerFunc_Handler).WithArgumentsInfo(new ArgumentsInfo(["self", "arg1", ], 2, false, false, 0, 0)).BuildAndRegister();
Interpreter.Assign(ModuleDescriptor, "MyObject", MyObjectClassDescription);
PythonTypes.BuildClass(MyObjectClassDescription);
