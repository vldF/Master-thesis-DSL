void Detect(Location location, SymbolicExpression expression, string vulnerabilityType, string grammar)
{
    var grmr = new PvoArgumentGrammar(grammar);
    Detector.Detect(location, expression, (VulnerabilityType)vulnerabilityType, grmr);
}

TExpr WithTaintMark<TExpr>(Location location, TExpr expression, string origin) where TExpr : SymbolicExpression
{
    var taintOrigin = origin switch {
        "Seal origin" => TaintOrigin.SealOrigin,
        "Second order" => TaintOrigin.SecondOrder,
        "Function argument" => TaintOrigin.FunctionArgument,
        "Express request JSON body" => TaintOrigin.ExpressRequestJsonBody,
        "Express request URL encoded body" => TaintOrigin.ExpressRequestUrlEncodedBody,
        "navigator.UserAgent" => TaintOrigin.BrowserUserAgent,
        "Document URL" => TaintOrigin.DocumentUrl,
        "Document URI" => TaintOrigin.DocumentUri,
        "Browser Cookie" => TaintOrigin.BrowserCookie,
        "document.referrer" => TaintOrigin.DocumentReferrer,
        "User Input" => TaintOrigin.WebFormUserInput,
        "Clipboard Data" => TaintOrigin.BrowserClipboardData,
        "Environment Variable" => TaintOrigin.EnvironmentVariable,
        _ => new TaintOrigin(origin),
    };

    return expression.With(taintOrigin);
}

SymbolicExpression WithoutVulnerability(
      Location location,
      SymbolicExpression expression,
      string vulnerabilityType)
{
    return expression.AddFilteredVulnerability((VulnerabilityType)vulnerabilityType);
}
