#load "Standard.jsa"
var CursorClassDescription = SemanticsApi.CreateClassObjectDescriptor("Cursor");
CallHandlerResult Cursor_execute_Handler(Location location, FunctionCall functionCall)
{
    var handledArguments = ProcessorApi.ProcessKeywordArguments(functionCall);
    handledArguments.TryGetValue("self", out var self);
    handledArguments.TryGetValue("query", out var query);
    handledArguments.TryGetValue("vars", out var vars);
    Detect(location, query, "SQL Injection", "SQL common");
    return CallHandlerResult.Processed(SemanticsApi.None);
}
var teintData1 = SemanticsApi.CreateObjectDescriptor("<<dsl__data_0>>").WithType(SemanticsApi.ListType);
var Cursor_execute_MethodDescriptor = ProcessorApi.CreateFunctionBuilder("execute").WithHandler(Cursor_execute_Handler).WithArgumentsInfo(new ArgumentsInfo(["self", "query", "vars", ], 3, false, false, 0, 0, ImmutableSegment.Create<SymbolicExpression>(teintData1))).AssignTo(CursorClassDescription).BuildAndRegister();
CallHandlerResult Cursor_executemany_Handler(Location location, FunctionCall functionCall)
{
    var handledArguments = ProcessorApi.ProcessKeywordArguments(functionCall);
    handledArguments.TryGetValue("self", out var self);
    handledArguments.TryGetValue("query", out var query);
    handledArguments.TryGetValue("vars", out var vars);
    Detect(location, query, "SQL Injection", "SQL common");
    return CallHandlerResult.Processed(SemanticsApi.None);
}
var teintData2 = SemanticsApi.CreateObjectDescriptor("<<dsl__data_1>>").WithType(SemanticsApi.ListType);
var Cursor_executemany_MethodDescriptor = ProcessorApi.CreateFunctionBuilder("executemany").WithHandler(Cursor_executemany_Handler).WithArgumentsInfo(new ArgumentsInfo(["self", "query", "vars", ], 3, false, false, 0, 0, ImmutableSegment.Create<SymbolicExpression>(teintData2))).AssignTo(CursorClassDescription).BuildAndRegister();
CallHandlerResult Cursor_fetchone_Handler(Location location, FunctionCall functionCall)
{
    var handledArguments = ProcessorApi.ProcessKeywordArguments(functionCall);
    handledArguments.TryGetValue("self", out var self);
    var teintData3 = SemanticsApi.CreateObjectDescriptor("<<dsl_tainted_data_0>>").WithType(SemanticsApi.ListType).With(new TaintOrigin("Second Order"));
    return CallHandlerResult.Processed(teintData3);
}
var Cursor_fetchone_MethodDescriptor = ProcessorApi.CreateFunctionBuilder("fetchone").WithHandler(Cursor_fetchone_Handler).WithArgumentsInfo(new ArgumentsInfo(["self", ], 1, false, false, 0, 0)).AssignTo(CursorClassDescription).BuildAndRegister();
CallHandlerResult Cursor_fetchmany_Handler(Location location, FunctionCall functionCall)
{
    var handledArguments = ProcessorApi.ProcessKeywordArguments(functionCall);
    handledArguments.TryGetValue("self", out var self);
    var teintData4 = SemanticsApi.CreateObjectDescriptor("<<dsl_tainted_data_1>>").WithType(SemanticsApi.ListType).With(new TaintOrigin("Second Order"));
    return CallHandlerResult.Processed(teintData4);
}
var Cursor_fetchmany_MethodDescriptor = ProcessorApi.CreateFunctionBuilder("fetchmany").WithHandler(Cursor_fetchmany_Handler).WithArgumentsInfo(new ArgumentsInfo(["self", ], 1, false, false, 0, 0)).AssignTo(CursorClassDescription).BuildAndRegister();
CallHandlerResult Cursor_fetchall_Handler(Location location, FunctionCall functionCall)
{
    var handledArguments = ProcessorApi.ProcessKeywordArguments(functionCall);
    handledArguments.TryGetValue("self", out var self);
    var teintData5 = SemanticsApi.CreateObjectDescriptor("<<dsl_tainted_data_2>>").WithType(SemanticsApi.ListType).With(new TaintOrigin("Second Order"));
    return CallHandlerResult.Processed(teintData5);
}
var Cursor_fetchall_MethodDescriptor = ProcessorApi.CreateFunctionBuilder("fetchall").WithHandler(Cursor_fetchall_Handler).WithArgumentsInfo(new ArgumentsInfo(["self", ], 1, false, false, 0, 0)).AssignTo(CursorClassDescription).BuildAndRegister();
Interpreter.Assign(ModuleDescriptor, "Cursor", CursorClassDescription);
PythonTypes.BuildClass(CursorClassDescription);
